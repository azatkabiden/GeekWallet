import telebot
import sqlite3
import os

bot = telebot.TeleBot('6948731078:AAGiZX4rO-S7DVK3-femTj2kG1oL3B3sqRY')

admin_ids = [1665454474, 1785007995]  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db_path = 'balances.db'

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
if not os.path.exists(db_path):
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã balances —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
    cursor.execute('''
        CREATE TABLE balances (
            user_number INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            balance INTEGER
        )
    ''')

    conn.commit()
    conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def log_action(action, admin_id, user_number, amount):
    print(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID {admin_id} {action} —É—á–∞—Å—Ç–Ω–∏–∫—É —Å –Ω–æ–º–µ—Ä–æ–º {user_number} {amount} –±–∞–ª–ª–æ–≤.")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
@bot.message_handler(commands=['balance'])
def check_balance(message):
    user_id = message.chat.id
    conn = sqlite3.connect('balances.db')
    cursor = conn.cursor()

    cursor.execute('SELECT balance FROM balances WHERE user_id = ?', (user_id,))
    user_balance = cursor.fetchone()

    cursor.execute('SELECT user_number FROM balances WHERE user_id = ?', (user_id,))
    user_number = cursor.fetchone()

    if user_balance:
        bot.reply_to(message, f"–í–∞—à –±–∞–ª–∞–Ω—Å:\nüéâ {user_balance[0]} GeekCoin\n–í–∞—à –Ω–æ–º–µ—Ä: {str(user_number)[1:-2]}")
    else:
        bot.reply_to(message, f"–í–∞—à –±–∞–ª–∞–Ω—Å:\n‚ùå 0 GeekCoin\n–í–∞—à –Ω–æ–º–µ—Ä: {str(user_number)[1:-2]}")

    conn.close()


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
@bot.message_handler(commands=['leader'], func=lambda message: message.from_user.id in admin_ids)
def max_balance(message):
    conn = sqlite3.connect('balances.db')
    cursor = conn.cursor()

    cursor.execute('SELECT MAX(balance) FROM balances')
    max_balance = cursor.fetchone()[0]

    bot.reply_to(message, f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {max_balance} GeekCoin")

    conn.close()


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
@bot.message_handler(commands=['check_balance'], func=lambda message: message.from_user.id in admin_ids)
def check_user_balance(message):
    try:
        user_number = int(message.text.split()[1])
        conn = sqlite3.connect('balances.db')
        cursor = conn.cursor()

        cursor.execute('SELECT balance FROM balances WHERE user_number = ?', (user_number,))
        user_balance = cursor.fetchone()

        if user_balance:
            bot.reply_to(message, f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_number}:\nüéâ {user_balance[0]} GeekCoin")
        else:
            bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º {user_number}:\n‚ùå 0 GeekCoin")

        conn.close()
    except (IndexError, ValueError):
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ /check_balance user_number")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.chat.id
    conn = sqlite3.connect('balances.db')
    cursor = conn.cursor()

    cursor.execute('SELECT * FROM balances WHERE user_id = ?', (user_id,))
    user_exists = cursor.fetchone()

    if not user_exists:
        cursor.execute('INSERT INTO balances (user_id, balance) VALUES (?, ?)', (user_id, 0))
        conn.commit()
        cursor.execute('SELECT user_number FROM balances WHERE user_id = ?', (user_id,))
        user_number = cursor.fetchone()
        bot.reply_to(message,
                     f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ GeekCon! \n\nüìå –í–∞—à –Ω–æ–º–µ—Ä - {str(user_number)[1:-2]}, –ø–æ–∫–∞–∑—ã–≤–∞–π—Ç–µ –µ–≥–æ –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞–º –Ω–∞ —Å—Ç–∞–Ω—Ü–∏—è—Ö, —á—Ç–æ–±—ã –æ–Ω–∏ –º–æ–≥–ª–∏ –Ω–∞—á–∏—Å–ª–∏—Ç—å –≤–∞–º GeekCoin-—ã\n\nüìå –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /balance.\n\n üìå –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –≤—Å–µ –ª–æ–∫–∞—Ü–∏–∏ GeekCon –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /events")
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è")
    else:
        cursor.execute('SELECT user_number FROM balances WHERE user_id = ?', (user_id,))
        user_number = cursor.fetchone()
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –≤–µ—Ä–Ω—É–ª—Å—è")
        bot.reply_to(message,
                     f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ! –í–∞—à –Ω–æ–º–µ—Ä - {str(user_number)[1:-2]}\n\nüìå–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /balance.")

    conn.close()


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
@bot.message_handler(commands=['add'], func=lambda message: message.from_user.id in admin_ids)
def add_balance(message):
    try:
        parts = message.text.split()
        admin_id = message.from_user.id
        user_number = int(parts[1])
        amount = int(parts[2])

        conn = sqlite3.connect('balances.db')
        cursor = conn.cursor()

        cursor.execute('SELECT balance FROM balances WHERE user_number = ?', (user_number,))
        user_balance = cursor.fetchone()

        if user_balance:
            new_balance = user_balance[0] + amount
            cursor.execute('UPDATE balances SET balance = ? WHERE user_number = ?', (new_balance, user_number))
            conn.commit()
            log_action("–¥–æ–±–∞–≤–∏–ª", admin_id, user_number, amount)
            bot.reply_to(message, f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_number} —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ {amount}.")
            cursor.execute('SELECT user_id FROM balances WHERE user_number = ?', (user_number,))
            user_id = cursor.fetchone()
            bot.send_message(str(user_id)[1:-2], f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} GeekCoin üéâ")

        else:
            bot.reply_to(message, f"–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        conn.close()
    except (IndexError, ValueError):
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ /add user_number amount")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
@bot.message_handler(commands=['sub'], func=lambda message: message.from_user.id in admin_ids)
def subtract_balance(message):
    try:
        parts = message.text.split()
        admin_id = message.from_user.id
        user_number = int(parts[1])
        amount = int(parts[2])

        conn = sqlite3.connect('balances.db')
        cursor = conn.cursor()

        cursor.execute('SELECT balance FROM balances WHERE user_number = ?', (user_number,))
        user_balance = cursor.fetchone()

        if user_balance:
            if user_balance[0] >= amount:
                new_balance = user_balance[0] - amount
                cursor.execute('UPDATE balances SET balance = ? WHERE user_number = ?', (new_balance, user_number))
                conn.commit()
                log_action("—É–º–µ–Ω—å—à–∏–ª", admin_id, user_number, amount)
                bot.reply_to(message, f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_number} —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ {amount}.")
                cursor.execute('SELECT user_id FROM balances WHERE user_number = ?', (user_number,))
                user_id = cursor.fetchone()
                bot.send_message(str(user_id)[1:-2], f"–° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–Ω—è–ª–∏ {amount} GeekCoin üòî")
            else:
                bot.reply_to(message, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

        else:
            bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º {user_number} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        conn.close()
    except (IndexError, ValueError):
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ /sub user_number amount")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –Ω–∞ GeekCon
@bot.message_handler(commands=['events'])
def get_events(message):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –∏–ª–∏ –¥—Ä—É–≥—É—é –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    events_text = "–°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –Ω–∞ GeekCon —Å–µ–≥–æ–¥–Ω—è:\n- –°–æ–±—ã—Ç–∏–µ 1\n- –°–æ–±—ã—Ç–∏–µ 2\n- –°–æ–±—ã—Ç–∏–µ 3"

    bot.send_message(message.chat.id, events_text)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤ —Å –±–∞–ª–∞–Ω—Å–∞–º–∏
@bot.message_handler(commands=['all_balances'], func=lambda message: message.from_user.id in admin_ids)
def all_balances(message):
    conn = sqlite3.connect('balances.db')
    cursor = conn.cursor()

    cursor.execute('SELECT user_number, balance FROM balances')
    all_balances = cursor.fetchall()

    balances_text = "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–∞–ª–∞–Ω—Å–æ–≤:\n"
    for user_number, balance in all_balances:
        balances_text += f"–ù–æ–º–µ—Ä: {user_number}, –ë–∞–ª–∞–Ω—Å: {balance} GeekCoin\n"

    bot.reply_to(message, balances_text)

    conn.close()


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(commands=['remove_user'], func=lambda message: message.from_user.id in admin_ids)
def remove_user(message):
    try:
        user_number = int(message.text.split()[1])
        conn = sqlite3.connect('balances.db')
        cursor = conn.cursor()

        cursor.execute('DELETE FROM balances WHERE user_number = ?', (user_number,))
        conn.commit()

        bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º {user_number} —É–¥–∞–ª–µ–Ω.")

        conn.close()
    except (IndexError, ValueError):
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ /remove_user [user_number]")


bot.polling(none_stop=True)
